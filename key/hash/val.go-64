package hash

import (
	"fmt"
	"hash/fnv"
	"strconv"
	"strings"
	"unsafe"

	"github.com/pkg/errors"
)

// Val is the output of a hash algorithm applied to some data structure. It
// is treated as a bit string that is split up into equal size groups of bits
// to be used as Index values in a HAMT data structure.
type Val uint64

// hashSize is the size of Val in bits.
// hashSize = 64 bits
const hashSize uint = uint(unsafe.Sizeof(Val(0))) * 8

// NumIndexBits is the fundemental setting for the Hamt data structure. Given
// that we hash every key ([]byte slice) into a Val, that Val must be
// split into depthLimit number of NumIndexBits wide parts. Each of those parts
// of the Val is used as the Index into the given level of the Hamt tree.
// So NumIndexBits determines how wide and how deep the Hamt can be.
// NumIndexBits = 4 or 5
const NumIndexBits uint = 4

// DepthLimit is the maximum number of levels of the Hamt. It is calculated as
// DepthLimit = floor(hashSize / NumIndexBits) or a strict integer division.
// DepthLimit = 10 ;hashSize=64, NumIndexBits=6
// DepthLimit = 8 or 6 ;hashSize=64, numIndex=4 or 5
const DepthLimit = hashSize / NumIndexBits
const remainder = hashSize - (DepthLimit * NumIndexBits)

// IndexLimit is the maximum number of entries in a Hamt interior node. In other
// words it is the width of the Hamt data structure.
const IndexLimit = 1 << NumIndexBits

// MaxDepth is the maximum value of a depth variable. MaxDepth = DepthLimit - 1
const MaxDepth = DepthLimit - 1

// MaxIndex is the maximum value of a Index variable. maxIndex = IndexLimit - 1
const MaxIndex = IndexLimit - 1

// Calculate deterministically calculates a randomized Val of a given byte
// slice .
func Calculate(bs []byte) Val {
	return Val(fold(hash(bs), remainder))
}

func hash(bs []byte) uint64 {
	var h = fnv.New64()
	h.Write(bs)
	return h.Sum64()
}

func mask(size uint) uint64 {
	return uint64(1<<size) - 1
}

func fold(hash uint64, rem uint) uint64 {
	return (hash >> (hashSize - rem)) ^ (hash & mask(hashSize-rem))
}

func indexMask(depth uint) Val {
	return Val((1<<NumIndexBits)-1) << (depth * NumIndexBits)
}

// Index returns the NumIndexBits bit value of the Val at 'depth' number of
// NumIndexBits number of bits into Val.
func (v Val) Index(depth uint) uint {
	_ = assertOn && assert(depth < DepthLimit, "Index: depth > MaxDepth")

	var idxMask = indexMask(depth)
	return uint((v & idxMask) >> (depth * NumIndexBits))
}

func hashPathMask(depth uint) Val {
	return Val(1<<((depth)*NumIndexBits)) - 1
}

// HashPath truncates the Val to 'depth' number of NumIndexBits index values.
// For depth=0 it always returns no path (aka a 0 value).
// For depth=MaxDepth it returns the full Val.
func (v Val) HashPath(depth uint) Val {
	_ = assertOn && assert(depth < DepthLimit, "HashPath(): dept > MaxDepth")

	if depth == 0 {
		return 0
	}

	return v & hashPathMask(depth)
}

// buildHashPath method adds a idx at depth level of the HashPath. Given a
// hash Path = "/11/07/13" and you call HashPath.buildHashPath(23, 3) the method
// will return HashPath "/11/07/13/23". HashPath is shown here in the string
// representation, but the real value is Val (aka uint64).
func (v Val) buildHashPath(idx, depth uint) Val {
	_ = assertOn && assert(idx < DepthLimit, "buildHashPath: idx > maxIndex")

	v &= hashPathMask(depth)
	return v | Val(idx<<(depth*NumIndexBits))
}

// HashPathString returns a string representation of the Index path of a
// Val. It will be string of the form "/idx0/idx1/..." where each idxN value
// will be a zero padded number between 0 and maxIndex. There will be limit
// number of such values where limit <= DepthLimit.
// If the limit parameter is 0 then the method will simply return "/".
// Example: "/00/24/46/17" for limit=4 of a NumIndexBits=5 hash value
// represented by "/00/24/46/17/34/08".
func (v Val) HashPathString(limit uint) string {
	_ = assertOn && assertf(limit <= DepthLimit,
		"HashPathString: limit,%d > DepthLimit,%d\n", limit, DepthLimit)

	if limit == 0 {
		return "/"
	}

	var strs = make([]string, limit)

	for d := uint(0); d < limit; d++ {
		var idx = v.Index(d)
		strs[d] = fmt.Sprintf("%02d", idx)
	}

	return "/" + strings.Join(strs, "/")
}

// BitString returns a Val as a string of bits separated into groups of
// NumIndexBits bits.
func (v Val) BitString() string {
	var strs = make([]string, DepthLimit)

	var fmtStr = fmt.Sprintf("%%0%db", NumIndexBits)
	for d := uint(0); d < DepthLimit; d++ {
		strs[MaxDepth-d] = fmt.Sprintf(fmtStr, v.Index(d))
	}

	var remStr string
	if remainder > 0 {
		remStr = strings.Repeat("0", int(remainder)) + " "
	}

	return remStr + strings.Join(strs, " ")
}

// String returns a string representation of a full Val. This is simply
// v.HashPathString(DepthLimit).
func (v Val) String() string {
	return v.HashPathString(DepthLimit)
}

// ParseHashPath is an unnecessary utility function to take the string
// representation of a hash.Val (something like "/02/12/13/09/00/01/15/07" for
// NumIndexBits==4 or "/02/12/19/27/00/31" for NumIndexBits==5) and converts it
// into a hash.Val and an error if there was a failure in the string
// representation.
func ParseHashPath(s string) (Val, error) {
	if !strings.HasPrefix(s, "/") {
		return 0, errors.Errorf(
			"ParseHashPath: input, %q, does not start with '/'", s)
	}

	if len(s) == 1 { // s="/"
		return 0, nil
	}

	if strings.HasSuffix(s, "/") {
		return 0, errors.Errorf("parseHashPath: input, %q, ends with '/'", s)
	}
	var s0 = s[1:] //take the leading '/' off
	var idxStrs = strings.Split(s0, "/")

	var v Val
	for i, idxStr := range idxStrs {
		var idx, err = strconv.ParseUint(idxStr, 10, int(NumIndexBits))
		if err != nil {
			return 0, errors.Wrapf(err,
				"ParseHashPath: the %d'th Index string failed to parse.", i)
		}

		//v |= Val(idx << (uint(i) * NumIndexBits))
		v = v.buildHashPath(uint(idx), uint(i))
	}

	return v, nil
}
